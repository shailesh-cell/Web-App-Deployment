name: Build and Push Image to ACR

on:
  workflow_dispatch:  # Allows manual execution of both jobs

jobs:
  login:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login using Service Principal
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
          enable-AzPSSession: true

  push-image:
    runs-on: ubuntu-latest
    needs: login
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  

      - name: Debug - List Files
        run: ls -R  

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Set environment variables for Terraform authentication
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Initialize Terraform Backend
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: Extract ACR Name and Container Name from Terraform Output
        working-directory: terraform
        run: |
          ACR_NAME=$(terraform output -raw acr_name 2>/dev/null || echo "${{ secrets.ACR_NAME }}")
          CONTAINER_NAME=$(terraform output -raw container_name 2>/dev/null || echo "${{ secrets.CONTAINER_NAME }}")
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and Push Docker Image
        working-directory: C:\Temp\my-webapp-deployment\flask-app
        run: |
          docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest .
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest


jobs:
  login:
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login using Service Principal
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'
          enable-AzPSSession: true

  acr:
    runs-on: ubuntu-latest
    needs: login  # Ensures login runs first
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # Fetches Terraform files

      - name: Debug - List Files
        run: ls -R  # Ensure Terraform files exist in the runner

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7

      - name: Set environment variables for Terraform authentication
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Initialize Terraform Backend
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TFSTATE_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TFSTATE_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"

      - name: Validate Terraform Configuration
        working-directory: terraform
        run: terraform validate

      - name: Create Azure Container Registry (ACR)
        working-directory: terraform
        run: |
          terraform apply -auto-approve -target=azurerm_container_registry.acr -var-file="env/dev.tfvars"  # Change "dev" if needed